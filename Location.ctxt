#BlueJ class context
comment0.target=Location
comment0.text=\r\n\ The\ class\ Location\ is\ for\ the\ location\ of\ a\ storage\ facility.\ It\ has\ a\ name\ and\ base\ price\ for\ the\ location\ and\r\n\ has\ methods\ to\ manipulate\ arrays\ storing\ information\ abount\ the\ units\ and\ the\ customers\ at\ the\ location.\r\n\r\n\ @author\ Valerie\ Foster\r\n\ @version\ 1/16/2018\r\n
comment1.params=name\ price
comment1.target=Location(java.lang.String,\ double)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Location\r\n\ \r\n\ @param\ \ \ name\ \ \ \ the\ name\ to\ identify\ the\ location\r\n\ @param\ \ \ price\ \ \ the\ base\ price\ for\ units\ at\ the\ location\r\n\ @throws\ \ IllegalArgumentException\ if\ the\ name\ does\ not\ follow\ the\ format\ of\ two\ uppercase\ letters\ followed\ by\ two\ digits,\ then\ more\ letters\r\n\ @throws\ \ IllegalArgumentException\ if\ the\ price\ is\ negative\r\n
comment10.params=
comment10.target=Unit[]\ getEmptyStan()
comment10.text=\r\n\ Uses\ the\ getEmpty\ method\ to\ find\ all\ the\ empty\ standard\ units\r\n\ \r\n\ @return\ \ an\ array\ of\ unrented\ Standard\ units\r\n
comment11.params=
comment11.target=Unit[]\ getEmptyHumid()
comment11.text=\r\n\ Uses\ the\ getEmpty\ method\ to\ find\ all\ the\ empty\ humidity\ controlled\ units\r\n\ \r\n\ @return\ \ an\ array\ of\ unrented\ HumidControl\ units\r\n
comment12.params=
comment12.target=Unit[]\ getEmptyTemp()
comment12.text=\r\n\ Uses\ the\ getEmpty\ method\ to\ find\ all\ the\ empty\ temperature\ controlled\ units\r\n\ \r\n\ @return\ \ an\ array\ of\ unrented\ TempControl\ units\r\n
comment13.params=rowStart\ rowEnd
comment13.target=Unit[]\ getEmpty(int,\ int)
comment13.text=\r\n\ Creates\ an\ array\ of\ units\ that\ aren't\ rented\ to\ anyone\ by\ looping\ through\ the\ units\ from\ the\ given\ start\ row\ to\ the\ given\ end\ row\r\n\ and\ finds\ the\ total\ number\ of\ units\ that\ aren't\ rented\ to\ anyone,\ then\ generates\ an\ array\ of\ that\ size,\ filling\ it\ with\ all\ \r\n\ the\ unrented\ units\ in\ the\ section\ of\ the\ the\ unitArr\ it\ loops\ through\r\n\r\n\ @param\ \ \ rowStart\ \ \ \ integer\ for\ where\ to\ start\ searching\ in\ the\ unitArr\r\n\ @param\ \ \ rowEnd\ \ \ \ \ \ integer\ for\ where\ to\ end\ searching\ in\ the\ unitArr\r\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ an\ array\ of\ unrented\ units\ in\ the\ given\ section\ of\ the\ unitArr\r\n
comment14.params=
comment14.target=void\ chargeRent()
comment14.text=\r\n\ This\ method\ loops\ through\ the\ cutomer\ array\ and\ uses\ the\ getUnitForCust\ method\ to\ charge\ every\ customer\ for\ all\ of\ the\ units\ \r\n\ they\ rent,\ and\ if\ they\ rent\ more\ than\ one\ unit\ they\ get\ a\ 5%\ discount\r\n
comment15.params=
comment15.target=java.lang.String\ toString()
comment15.text=\ \r\n\ Creates\ and\ returns\ a\ string\ representation\ of\ this\ Location\r\n\ \r\n\ @return\ \ a\ String\ showing\ basic\ information\ about\ the\ location\r\n
comment2.params=
comment2.target=java.lang.String\ getName()
comment2.text=\r\n\ An\ accessor\ -\ returns\ the\ location's\ identifier\r\n\ \r\n\ @return\ \ the\ location's\ name\r\n
comment3.params=
comment3.target=double\ getBasePrice()
comment3.text=\r\n\ An\ accessor\ -\ returns\ the\ location's\ base\ price\r\n\ \r\n\ @return\ \ the\ location's\ base\ price\r\n
comment4.params=row\ col
comment4.target=Unit\ getUnit(int,\ int)
comment4.text=\r\n\ This\ method\ returns\ a\ unit\ at\ the\ point\ of\ the\ given\ indexes\r\n\r\n\ @param\ \ \ row\ \ \ \ \ an\ integer\ for\ the\ row\ index\r\n\ @param\ \ \ col\ \ \ \ \ an\ integer\ for\ the\ column\ index\r\n\ @return\ \ \ \ \ \ \ \ \ \ a\ unit\r\n
comment5.params=ind
comment5.target=Customer\ getCust(int)
comment5.text=\r\n\ This\ method\ returns\ a\ customer\ at\ the\ given\ index\r\n\r\n\ @param\ \ \ ind\ \ \ \ \ an\ index\r\n\ @return\ \ \ \ \ \ \ \ \ \ a\ customer\r\n
comment6.params=
comment6.target=int\ getCustCount()
comment6.text=\r\n\ An\ accessor\ -\ returns\ how\ many\ cutomers\ there\ are\ at\ this\ location\r\n\ \r\n\ @return\ \ the\ number\ of\ total\ customer's\ in\ the\ location,\ an\ integer\r\n
comment7.params=newCust
comment7.target=void\ addCust(Customer)
comment7.text=\r\n\ Adds\ a\ customer\ to\ the\ customer\ array\ at\ the\ current\ custCount,\ then\ adds\ one\ to\ the\ custCount\r\n\r\n\ @param\ \ \ newCust\ \ \ \ \ a\ customer\ to\ add\r\n
comment8.params=cust
comment8.target=Unit[]\ getUnitForCust(Customer)
comment8.text=\r\n\ Creates\ an\ array\ of\ units\ rented\ to\ the\ given\ customer\ by\ looping\ through\ the\ units\ and\ finding\ the\ total\ number\ of\ units\ \r\n\ rented\ to\ the\ given\ customer,\ generating\ an\ array\ of\ that\ size,\ then\ filling\ it\ with\ all\ the\ units\ for\ that\ customer\r\n\r\n\ @param\ \ \ cust\ \ \ \ a\ customer\ of\ the\ location\r\n\ @return\ \ \ \ \ \ \ \ \ \ an\ array\ of\ rented\ units\r\n
comment9.params=
comment9.target=Unit[]\ getEmptyUnits()
comment9.text=\r\n\ Uses\ the\ getEmpty\ method\ to\ find\ all\ the\ empty\ units\ of\ all\ types\r\n\ \r\n\ @return\ \ an\ array\ of\ unrented\ units\r\n
numComments=16
